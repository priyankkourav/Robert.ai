import speech_recognition as sr
import pyttsx3
import requests
from bs4 import BeautifulSoup
import re
import sys
import asyncio

# Initialize text-to-speech engine
tts_engine = pyttsx3.init()
tts_engine.setProperty('rate', 150)  # Speed of speech
tts_engine.setProperty('volume', 0.9)  # Volume (0.0 to 1.0)

# Initialize speech recognizer
recognizer = sr.Recognizer()
mic = sr.Microphone()

# Agent name
AGENT_NAME = "Robert"

def speak(text):
    """Convert text to speech."""
    print(f"{AGENT_NAME}: {text}")
    tts_engine.say(text)
    tts_engine.runAndWait()

def listen():
    """Listen for voice input and return transcribed text."""
    with mic as source:
        recognizer.adjust_for_ambient_noise(source)
        speak(f"I'm listening. Say '{AGENT_NAME}' followed by your command.")
        try:
            audio = recognizer.listen(source, timeout=5, phrase_time_limit=10)
            text = recognizer.recognize_google(audio).lower()
            print(f"You said: {text}")
            return text
        except sr.WaitTimeoutError:
            speak("I didn't hear anything. Please try again.")
            return None
        except sr.UnknownValueError:
            speak("I couldn't understand that. Please repeat.")
            return None
        except sr.RequestError:
            speak("I'm having trouble connecting to the speech service.")
            return None

def search_web(query):
    """Perform a web search and return summarized results."""
    try:
        # Example using web scraping (DuckDuckGo as it's lightweight)
        url = f"https://duckduckgo.com/html/?q={query.replace(' ', '+')}"
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Extract search result snippets
        results = []
        for result in soup.find_all('a', class_='result__a', limit=3):
            title = result.get_text()
            href = result.get('href')
            snippet = result.find_parent('div', class_='result__snippet')
            snippet_text = snippet.get_text() if snippet else "No description available."
            results.append(f"Title: {title}\nLink: {href}\nDescription: {snippet_text}")
        
        if results:
            summary = "\n\n".join(results)
            return f"Here are the top results for '{query}':\n{summary}"
        else:
            return f"Sorry, I couldn't find any results for '{query}'."
    except Exception as e:
        return f"An error occurred while searching: {str(e)}"

# Optional: Uncomment to use SerpAPI (requires API key)
"""
def search_web(query):
    try:
        from serpapi import GoogleSearch
        params = {
            "q": query,
            "api_key": "YOUR_SERPAPI_KEY"  # Replace with your SerpAPI key
        }
        search = GoogleSearch(params)
        results = search.get_dict().get('organic_results', [])
        if results:
            summary = "\n\n".join([f"Title: {r['title']}\nLink: {r['link']}\nDescription: {r.get('snippet', 'No description')}" for r in results[:3]])
            return f"Here are the top results for '{query}':\n{summary}"
        else:
            return f"Sorry, I couldn't find any results for '{query}'."
    except Exception as e:
        return f"An error occurred while searching: {str(e)}"
"""

def process_command(command):
    """Process the user's command and return a response."""
    if not command:
        return None
    
    # Remove the agent name and clean the command
    command = command.replace(AGENT_NAME.lower(), "").strip()
    
    # Exit command
    if command in ["exit", "quit", "stop"]:
        speak("Goodbye!")
        sys.exit(0)
    
    # Web search command
    if command.startswith("search for ") or command.startswith("look up "):
        query = re.sub(r"^(search for |look up )", "", command)
        return search_web(query)
    
    # General conversation or fallback
    return f"You said '{command}'. I'm not sure how to respond to that yet, but I can search the web if you like. Just say '{AGENT_NAME} search for [your query]'."

async def main():
    """Main loop for the AI agent."""
    speak(f"Hello, I am {AGENT_NAME}, your AI assistant. Say my name followed by a command to interact with me.")
    
    while True:
        command = listen()
        if command and AGENT_NAME.lower() in command.lower():
            response = process_command(command)
            if response:
                speak(response)
        await asyncio.sleep(0.1)  # Prevent tight loop

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        speak("Shutting down. Goodbye!")
        sys.exit(0)
